if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
}

package require type

test define-0.1 {too few args} -body { #<<<
	list [catch {type::define} r o] $r [dict get $o -errorcode]
} -cleanup {
	unset -nocomplain r o
} -result {1 {wrong # args: should be "type::define type handlers"} {TCL WRONGARGS}}
#>>>
test define-0.2 {too few args} -body { #<<<
	list [catch {type::define define-0.2} r o] $r [dict get $o -errorcode]
} -cleanup {
	unset -nocomplain r o
} -result {1 {wrong # args: should be "type::define type handlers"} {TCL WRONGARGS}}
#>>>
test define-0.3 {too many args} -body { #<<<
	list [catch {type::define define-0.3 {create {apply {v {set v}}}} bar} r o] $r [dict get $o -errorcode]
} -cleanup {
	unset -nocomplain r o
} -result {1 {wrong # args: should be "type::define type handlers"} {TCL WRONGARGS}}
#>>>
test define-0.4 {missing create in handlers} -body { #<<<
	list [catch {type::define define-0.4 {}} r o] $r [dict get $o -errorcode]
} -cleanup {
	unset -nocomplain r o
} -result {1 {create is required in handlers} NONE}
#>>>
test define-0.4.1.1 {create handler isn't a valid list} -body { #<<<
	list [catch {
		type::define define-0.4.1.1 {
			create "\{foo"
		}
	} r o] $r [dict get $o -errorcode]
} -cleanup {
	unset -nocomplain r o
} -result {1 {unmatched open brace in list} {TCL VALUE LIST BRACE}}
#>>>
test define-0.4.1.2 {create handler is an empty list} -body { #<<<
	list [catch {
		type::define define-0.4.1.2 {
			create {}
		}
	} r o] $r [dict get $o -errorcode]
} -cleanup {
	unset -nocomplain r o
} -result {1 {Handler create of "define-0.4.1.2" cannot be an empty list} NONE}
#>>>
test define-0.4.1.3 {create handler is valid global command} -setup { #<<<
	proc ::create-0.4.1.3 val {format {define-0.4.1.3: %s} $val}
} -body {
	type::define define-0.4.1.3 {
		create create-0.4.1.3
	}
	type::get define-0.4.1.3 val-0.4.1.3
} -cleanup {
	rename ::create-0.4.1.3 {}
} -result {define-0.4.1.3: val-0.4.1.3}
#>>>
test define-0.4.1.4 {create handler is valid global command, not shadowed by current namespace} -setup { #<<<
	proc ::create-0.4.1.4 val {format {define-0.4.1.4: %s} $val}
	namespace eval ::ns-0.4.1.4 {
		proc create-0.4.1.4 val {format {wrong-0.4.1.4: %s} $val}
	}
} -body {
	namespace eval ::ns-0.4.1.4 {
		type::define define-0.4.1.4 {
			create create-0.4.1.4
		}
		type::get define-0.4.1.4 val-0.4.1.4
	}
} -cleanup {
	rename ::create-0.4.1.4 {}
	namespace delete ::ns-0.4.1.4
} -result {define-0.4.1.4: val-0.4.1.4}
#>>>
test define-0.4.1.5 {create handler ns-only command} -setup { #<<<
	namespace eval ::ns-0.4.1.5 {
		proc create-0.4.1.5 val {format {wrong-0.4.1.5: %s} $val}
	}
} -body {
	namespace eval ::ns-0.4.1.5 {
		list [catch {
			type::define define-0.4.1.5 {
				create create-0.4.1.5
			}
		} r o] $r [dict get $o -errorcode]
	}
} -cleanup {
	namespace delete ::ns-0.4.1.5
} -result {1 {unknown command "create-0.4.1.5"} {TCL LOOKUP COMMAND create-0.4.1.5}}
#>>>
test define-0.5 {invalid handler} -body { #<<<
	list [catch {
		type::define define-0.5 {
			create {apply {val {set val}}}
			bogus  {}
		}
	} r o] $r [dict get $o -errorcode]
} -cleanup {
	unset -nocomplain r o
} -result {1 {bad handler "bogus": must be create, string, free, or dup} {TCL LOOKUP INDEX handler bogus}}
#>>>
test define-1.0 {define a type} -body { #<<<
	type::define define-1.0 {
		create	{apply {
			val {set val}
		}}
	}
} -result {}
#>>>
test define-1.1 {define a type, get it} -body { #<<<
	type::define define-1.1 {
		create	{apply {
			val {format {define-1.1: %s} $val}
		}}
	}
	type::get define-1.1 "hello, type"
} -result {define-1.1: hello, type}
#>>>
test define-2.0 {redefine a type} -body { #<<<
	set res	{}
	type::define define-2.0 {
		create	{apply {
			val {format {define-2.0: %s} $val}
		}}
	}
	lappend res	[type::get define-2.0 v1]
	type::define define-2.0 {
		create	{apply {
			val {format {define-2.0 (redefined): %s} $val}
		}}
	}
	lappend res	[type::get define-2.0 v1]	;# v1 literal is already of this type, shouldn't regen
	lappend res	[type::get define-2.0 v2]
} -cleanup {
	unset -nocomplain res
} -result {{define-2.0: v1} {define-2.0: v1} {define-2.0 (redefined): v2}}
#>>>


# cleanup
::tcltest::cleanupTests
return

# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4

